- content_for :include_javascript do
  = taxon_limits(@taxon)
  %script{:type => 'text/javascript+protovis'}
    :plain
      var li = $(this).parent(); // used to track which rank is shown
      var taxon_id = $('#graph').attr('taxon_id');
      updateData();
      
      // The units and dimensions to visualize, in order.
      var units = {
        "Lifespan, days":    {name: "lifespan"    , unit: " days" },
        "Birth Weight, g":   {name: "birth weight", unit: " g"    },
        "Adult Weight, g":   {name: "adult weight", unit: " g"    },
        "Litter Size":       {name: "litter size" , unit: ""      }
      }

      var dims = pv.keys(units);

      // Converts Lifespan, days to just Lifespan
      var conversion = function(method)
      {
        if(method == 'Lifespan, days') { 
          method = 'Lifespan'
        }
        if(method =='Birth Weight, g') {
          method = 'Birth Weight'
        }
        if(method =='Adult Weight, g') {
          method = 'Adult Weight'
        }
        if(method =='Litter Size') {
          method = 'Litter Size'
        }

          return method
      }

      /* Sizing and scales. */
      var w = 890,
          h = 260,
          x = pv.Scale.ordinal(dims).splitFlush(0, w),
          y = pv.dict(
                dims,
                function(t) pv.Scale.linear(
                  data.filter( function(d) dims.map(function(dim) d[dim]).indexOf("") == -1 ),
                  function(d) d[t],
                  function(d) d[t]
                ).range(0, h)
              ),
          c = pv.dict(dims, function(t) pv.Scale.linear(
                data.filter(function(d) !isNaN(d[t])),
              function(d) Math.floor(d[t]),
              function(d) Math.ceil(d[t])
              ).range("#a5e1f9", "#0086bb"));
      
      /* Interaction state. */
      var filter =  pv.dict(
                      dims, function(t) {
                        return {
                          min: y[t].domain()[0],
                          max: y[t].domain()[1]
                        };
                      }
                    ), active = "Lifespan, days";

      // root container
      var vis = new pv.Panel()
          .width(w)
          .height(h)
          .left(30)
          .right(30)
          .top(30)
          .bottom(20)
          .canvas('graph'); // where to put it

      // The parallel coordinates display - thin lines.
      vis.add(pv.Panel)
          .data(function() data)
          .visible(function(d) dims.every(function(t)
              (d[t] >= filter[t].min) && (d[t] <= filter[t].max)))
        .add(pv.Line)
          .data(dims)
          .left(function(t, d) x(t))
          .bottom(function(t, d) y[t](d[t]))
          .strokeStyle("#ddd")
          .lineWidth(1)
          .antialias(false);

      // Rule per dimension.
      rule = vis.add(pv.Rule)
          .data(dims)
          .left(x);

      // Dimension label
      rule.anchor("top").add(pv.Label)
          .top(-12)
          .font("bold 10px sans-serif")
          .text(function(d) units[d].name);

      // The parallel coordinates display - thicker lines from being filtered.
      var change = vis.add(pv.Panel);

      var line = change.add(pv.Panel)
          .data(function() data)
          .visible(function(d) dims.map(function(dim) d[dim]).indexOf("") == -1)
        .add(pv.Line)
          .data(dims)
          .left(function(t, d) x(t))
          .bottom(function(t, d) y[t](d[t]))
          .strokeStyle(function(t, d) d["Hover"] == "X" ? "#da227e" : d["Select"] == "X" ? "#C0F73E" : (c[active](d[active])))
          .lineWidth(4)
          .text(function(t, d) y[t](d[t]))
          .event("mouseover", function(t, d) turnHoveredOn($('#taxatable .taxon[taxon_id~=value]'.replace('value', d["ID"]))) )
          .event("mouseout", function(t, d) turnHoveredOff($('#taxatable .taxon[taxon_id~=value]'.replace('value', d["ID"]))) )
          .event("click", function(t, d) toggleSelected($('#taxatable .taxon[taxon_id~=value]'.replace('value', d["ID"]))));

      // Updater for slider and resizer.
      function update(d) {
        var t = d.dim;
        filter[t].min = Math.max(y[t].domain()[0], y[t].invert(h - d.y - d.dy));
        filter[t].max = Math.min(y[t].domain()[1], y[t].invert(h - d.y));
        active = t;
        change.render();
        return false;
      }

      /* Handle select and drag */
      var handle = change.add(pv.Panel)
          .data(dims.map(function(dim) { return {y:0, dy:h, dim:dim}; }))
          .left(function(t) x(t.dim) - 30)
          .width(60)
          .fillStyle("rgba(0,0,0,.001)")
        .add(pv.Bar)
          .left(25)
          .top(function(d) d.y)
          .width(10)
          .height(function(d) d.dy)
          .fillStyle(function(t) t.dim == active
              ? c[t.dim]((filter[t.dim].max + filter[t.dim].min) / 2)
              : "hsla(0,0,50%,.5)")
          .strokeStyle("white")
          .cursor("move")
          .event("mousedown", pv.Behavior.drag())
          .event("dragstart", update)
          .event("drag", update);

      handle.anchor("bottom").add(pv.Label)
          .textBaseline("top")
          .text(function(d) limits["bottom"][d.dim]);

      handle.anchor("top").add(pv.Label)
          .textBaseline("bottom")
          .text(function(d) limits["top"][d.dim]);

      var tooltip = change.add(pv.Panel)
          .data(function() data)
        .add(pv.Bar)
          .data(dims)
          .height(30)
          .width(100)
          .lineWidth(0)
          .bottom(function(t, d) y[t](d[t]))
          .left(function(t, d) t == dims[dims.length-1] ? x(t) - 110 : t == dims[0] ? x(t) + 10 : x(t) - 50)
          .fillStyle("rgba(0, 0, 0, 0.8)")
          .visible(function(t, d) d["Hover"] == "X" && d[t])  /* Visible if the data exists, and is hovered. */
        .add(pv.Label)
          .text(function(t, d) d[conversion(t)])
          .textStyle("white")
          .textAlign(function(t, d) t == dims[dims.length-1] ? "right" : t == dims[0] ? "left" : "center")
          .left(function(t, d) t == dims[dims.length-1] ? x(t) - 20 : t == dims[0] ? x(t) + 20 : x(t))
          .bottom(function(t, d) y[t](d[t]) + 9);

      var nametooltip = change.add(pv.Bar)
          .data(function() data)
          .height(30)
          .width(160)
          .lineWidth(0)
          .top(0)
          .left(w/2 - 80)
          .fillStyle("rgba(0, 0, 0, 0.8)")
          .visible(function(d) d["Hover"] == "X")  /* Visible if the data exists, and is hovered. */
        .add(pv.Label)
          .text(function(d) d["Name"])
          .textStyle("white")
          .textAlign("center")
          .font("bold 12px sans-serif")
          .top(22)
          .left(w/2);

      vis.render();

  :javascript
    function updateData() {
      data = $.table("#taxatable").objs();
      /*
        Here, we're sorting data by hovers on top, then selected values, and finally non-selected values on bottom.
      */
      data = $.each(data, function(index, value) {
        if (value["Hover"] == "X")
          value["order"] = 1;
        else if (value["Select"] == "X")
          value["order"] = 2;
        else
          value["order"] = 3;
        return value;
      }).sort(function(a, b) {
        return b["order"] - a["order"];
      });
    };

    function clearTableSelections() {
      $('#taxatable .taxon.selected').each(function(index, row) {
        toggleSelected(row);
      });
    };

    function clearTableHovers() {
      $('#taxatable .taxon.hover').each(function(index, row) {
      $(row).removeClass("hover");
      $(row).children(".hover").html("");
      });
    };

    function toggleSelected(row) {
      var taxon_id = $(row).attr("taxon_id");
      $(row).toggleClass("selected");
      $(row).toggleX(".select");
      updateData();
    };

    function turnHoveredOn(row) {
      clearTableHovers();
      $(row).addClass("hover");
      $(row).children(".hover").html("X");
      updateData();
      vis.render();
    };

    function turnHoveredOff(row) {
      $(row).removeClass("hover");
      $(row).children(".hover").html("");
      updateData();
      vis.render();
    };

    function toggleParameter(parameter, value) {
      if ($.inArray(parameter, $.address.parameterNames()) == -1) {
        $.address.parameter(parameter, value, true)
      } else {
        $.address.parameter(parameter, null, true)
      }
    };

    // jQuery plugin function to toggle an "X" in a table cell.
    $.fn.toggleX = function(selector) {
      td = $(this).children(selector);
      if (td.html() == "X") {
        td.html("");
      } else {
        td.html("X");
      }
    };

    $(document).ready(function() {

      // Pre-highlight any rows determined by the parameters.
      $.address.change(function (){
        clearTableSelections();
        $.each($.address.parameterNames(), function(index, value) {
          highlight = value.match(/\d+$/)[0]
          row = $('#taxatable .taxon[taxon_id~=value]'.replace('value', highlight));
          toggleSelected(row);
        });
        vis.render();
      });

      // Taxonomy dropdown navigation.
      $('#taxonomic_selector select').live('change', function(){
        window.open(("../" + this.options[this.selectedIndex].value), '_top');
      });

      // Turn the table into a 'table' object, used by that jQuery plugin for turning it into data.
      $("#taxatable").table();

      // If table row is clicked, highlight it and the corresponding line in the graph.
      $('#taxatable tr.taxon').click(function(event){
        if (event.target.constructor == HTMLTableCellElement) {  // Make sure we're not clicking an anchor
          toggleSelected(this);
          toggleParameter("highlight_" + $(this).attr("taxon_id"), "true");
          vis.render();
        }
      });

      // If table row is hovered, highlight it and the corresponding line in the graph.
      $('#taxatable tr.taxon').hover(
        function() {
          clearTableHovers();
          turnHoveredOn(this);
          // If you're comparing me to the above callback... I don't save hovered information in the params. :-)
        },
        function () {
          turnHoveredOff(this);
        }
      );

    })